[settings]

 ; ||| choose which modules to run |||
run_model_fitting = True
run_diagnostics = True
run_cross_validation = True
run_auto_arima = True

 ; ||| set model_type to arima or sarima, depending on which needs to be used |||
model_type = True

; ||| set this to true to delete all non archived files in the directory structure |||
delete_files = True

; ||| set this to true to archive all result files to the appropriate directory, not implemented |||
archive_files = False

; ||| start and end dates for the raw data |||
start_date = 2013-01-01
end_date = 2022-12-31

; ||| if the raw data is not comma delimited, set this to the correct delimiter |||
delimiter = \t

; ||| set the name of the date column here |||
date_col = Date

; ||| set this to the time interval between each data point |||
data_freq = 15min

; ||| determine the optimal imputation method and set it here |||
impute_method = ffill

; ||| parameters to print the results to the screen and save the results as a pdf or jpg: set each to true or false |||
show = False
save = True

; ||| set the name of the data column here |||
col_name = Flow

[preprocessing]

; ||| process pound river data |||
pound_filepath = data/raw/pound_river_10yr_cfs_data.txt
pound_save_filepath = data/pound.csv
pound_list_col_del = ['agency_cd', 'site_no', 'tz_cd', '147720_00060_cd']
pound_dict_col_rename = {'datetime': 'Date', '147720_00060': 'Flow'}

; ||| process russell fork river data |||
rf_filepath = data/raw/russell_fork_10yr_cfs_data.txt
rf_save_filepath = data/russellfork.csv
rf_list_col_del = ['agency_cd', 'site_no', 'tz_cd', '147710_00060_cd']
rf_dict_col_rename = {'datetime': 'Date', '147710_00060': 'Flow'}

; ||| merge pound and russell fork river data |||
dict_col = {'Flow_x': 'Pound_Flow', 'Flow_y': 'Rf_Flow'}
new_col_name = Flow
merged_filepath = data/rfg.csv

[create_dataframes]

; ||| resamples dataframes with intervals specified here using first, mean, and last |||
frequency_list = ['1H', '6H', '12H', '1D', '7D', '14D', '1M']

; ||| to reduce the runtime set row_cap to the maximum number of rows wanted to truncate the dataframes |||
row_cap = 50000

[parameter_estimation]

; ||| number of lags in the acf and pacf plots |||
lags = 50

; ||| set the length of the seasonal trend for each dataframe, 3 per interval |||
seasonal_period = [8760, 8760, 8760, 1460, 1460, 1460, 730, 730, 730, 365, 365, 365, 52, 52, 52, 26, 26, 26, 12, 12, 12]

[model_fitting]
testing_set_size = 50

; ||| list of tuples of arima parameters for each dataframe since sarimax passed the parameters as a tuple |||
order_list_arima = [(3, 0, 3, 0, 0, 0, 0), (3, 1, 1, 0, 0, 0, 0), (3, 0, 3, 0, 0, 0, 0), (0, 2, 2, 0, 0, 0, 0), (0, 1, 1, 0, 0, 0, 0), (0, 2, 1, 0, 0, 0, 0), (0, 1, 0, 0, 0, 0, 0), (1, 0, 3, 0, 0, 0, 0), (0, 1, 1, 0, 0, 0, 0), (0, 1, 0, 0, 0, 0, 0), (1, 0, 2, 0, 0, 0, 0), (3, 0, 0, 0, 0, 0, 0)]
order_list_sarima = [(2, 1, 2, 1, 0, 2, 52), (2, 1, 2, 1, 0, 2, 52), (2, 1, 2, 1, 0, 2, 52), (1, 0, 1, 3, 0, 3, 26), (1, 0, 1, 3, 0, 3, 26), (1, 0, 1, 3, 0, 3, 26), (2, 0, 2, 3, 0, 3, 12), (2, 0, 2, 3, 0, 3, 12), (2, 0, 2, 3, 0, 3, 12)]

[cross_validation]

; ||| set the number of cross validation groups |||
groups = 5

; ||| set this to the size of the in-sample and out_of_sample cross-validation groups |||

; ||| need to ensure there are enough rows in the dataframe, ie. if number of groups is 5 and testing_set_size_cv |||

; ||| is 10 then that would require a minimum of 100 rows of data. |||
testing_set_size_cv = 50

; ||| select which models to cross validate |||
keys = ['1H_mean', '6H_mean', '12H_mean', '1D_mean']
order_list_trun_arima = [(3, 1, 2, 0, 0, 0, 0), (0, 1, 1, 0, 0, 0, 0), (1, 0, 3, 0, 0, 0, 0), (1, 1, 0, 0, 0, 0, 0)]
order_list_trun_sarima = [(2, 1, 2, 1, 0, 2, 52), (1, 0, 1, 3, 0, 3, 26), (2, 0, 2, 3, 0, 3, 12)]

[auto_arima]

; ||| select which time interval to use. |||
key = ['1D_max']

; ||| the lower and upper bounds can be set here for the arima or sarima parameters |||

; ||| to run an arima model set the values of p, d, q, and m all to 0 |||

; ||| warning: the number of models can become very large so use the results from above |||

; ||| to narrow the range of each parameter as much as possible. |||

; ||| arima |||

; ||| non-seasonal autoregressive order (p) |||
p_min = 0
p_max = 0

; ||| number of non-seasonal differences (d) |||
d_min = 0
d_max = 0

; ||| non-seasonal moving average order (q) |||
q_min = 0
q_max = 0

; ||| sarima |||

; ||| seasonal autoregressive order (p) |||

; ||| number of seasonal differences (d) |||

; ||| seasonal moving average order (q) |||

; ||| length of the season |||
m = [0]

